{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Container,Typography}from'@mui/material';import QuoteInput from'./component/QuoteInput';import QuoteDisplay from'./component/QuoteDisplay';import ActionButtons from'./component/ActionButtons';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// const backendURL = \"https://afternoon-depths-72364-ad550251f5f5.herokuapp.com/\"\n//  When testing the local backend \nconst backendURL=\"http://localhost:4000\";const[quote,setQuote]=useState(\"\");const[displayQuote,setDisplayQuote]=useState(null);const[isLoading,setIsLoading]=useState(false);useEffect(()=>{const fetchRandomQuote=async()=>{setIsLoading(true);try{const response=await fetch(\"\".concat(backendURL,\"/random\"));const data=await response.json();setDisplayQuote(data.quote);}catch(error){console.error(\"Error fetching random quote:\",error);}setIsLoading(false);};fetchRandomQuote();},[backendURL]);// <-- Added dependency here\nconst handleSave=async()=>{try{await fetch(\"\".concat(backendURL,\"/add\"),{method:\"POST\",headers:{'Content-Type':'application/json'},body:JSON.stringify({quote})});setQuote(\"\");}catch(error){console.error(\"Error saving the quote:\",error);}};const handleGenerate=async()=>{setIsLoading(true);try{const response=await fetch(\"\".concat(backendURL,\"/random\"));const data=await response.json();setDisplayQuote(data.quote);}catch(error){console.error(\"Error fetching random quote:\",error);}setIsLoading(false);};return/*#__PURE__*/_jsxs(Container,{component:\"main\",sx:{height:'100vh',display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,align:\"center\",children:\"Quote Generator\"}),/*#__PURE__*/_jsx(QuoteInput,{quote:quote,setQuote:setQuote,handleSave:handleSave}),/*#__PURE__*/_jsx(ActionButtons,{handleSave:handleSave,handleGenerate:handleGenerate}),/*#__PURE__*/_jsx(QuoteDisplay,{displayQuote:displayQuote,isLoading:isLoading})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","QuoteInput","QuoteDisplay","ActionButtons","jsx","_jsx","jsxs","_jsxs","App","backendURL","quote","setQuote","displayQuote","setDisplayQuote","isLoading","setIsLoading","fetchRandomQuote","response","fetch","concat","data","json","error","console","handleSave","method","headers","body","JSON","stringify","handleGenerate","component","sx","height","display","flexDirection","justifyContent","alignItems","children","variant","gutterBottom","align"],"sources":["/Users/Daniel/Bootcamp/portfolio/random_quote/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Typography } from '@mui/material';\nimport QuoteInput from './component/QuoteInput';\nimport QuoteDisplay from './component/QuoteDisplay';\nimport ActionButtons from './component/ActionButtons';\n\nfunction App() {\n    // const backendURL = \"https://afternoon-depths-72364-ad550251f5f5.herokuapp.com/\"\n\n    //  When testing the local backend \n    const backendURL = \"http://localhost:4000\";\n    \n    const [quote, setQuote] = useState<string>(\"\");\n    const [displayQuote, setDisplayQuote] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n\n    useEffect(() => {\n        const fetchRandomQuote = async () => {\n            setIsLoading(true);\n            try {\n                const response = await fetch(`${backendURL}/random`);\n                const data = await response.json();\n                setDisplayQuote(data.quote);\n            } catch (error) {\n                console.error(\"Error fetching random quote:\", error);\n            }\n            setIsLoading(false);\n        };\n        fetchRandomQuote();\n    }, [backendURL]); // <-- Added dependency here\n\n    const handleSave = async (): Promise<void> => {\n        try {\n            await fetch(`${backendURL}/add`, {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ quote })\n            });\n            setQuote(\"\");\n        } catch (error) {\n            console.error(\"Error saving the quote:\", error);\n        }\n    }\n    \n    const handleGenerate = async (): Promise<void> => {\n        setIsLoading(true);\n        try {\n            const response = await fetch(`${backendURL}/random`);\n            const data = await response.json();\n            setDisplayQuote(data.quote);\n        } catch (error) {\n            console.error(\"Error fetching random quote:\", error);\n        }\n        setIsLoading(false);\n    }\n\n    return (\n        <Container component=\"main\" sx={{\n            height: '100vh',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n        }}>\n            <Typography variant=\"h4\" gutterBottom align=\"center\">\n                Quote Generator \n            </Typography>\n\n            <QuoteInput \n                quote={quote}\n                setQuote={setQuote}\n                handleSave={handleSave}\n            />\n\n            <ActionButtons \n                handleSave={handleSave}\n                handleGenerate={handleGenerate}\n            />\n\n            <QuoteDisplay displayQuote={displayQuote} isLoading={isLoading} />\n        </Container>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}